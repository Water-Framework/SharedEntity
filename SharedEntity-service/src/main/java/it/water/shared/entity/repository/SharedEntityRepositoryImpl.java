package it.water.shared.entity.repository;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.repository.query.Query;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.repository.entity.model.exceptions.NoResultException;
import it.water.repository.jpa.WaterJpaRepositoryImpl;
import it.water.shared.entity.api.SharedEntityRepository;
import it.water.shared.entity.model.WaterSharedEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @Generated by Water Generator
 * Repository Class for SharedEntity entity.
 */
@FrameworkComponent
public class SharedEntityRepositoryImpl extends WaterJpaRepositoryImpl<WaterSharedEntity> implements SharedEntityRepository {
    private static Logger log = LoggerFactory.getLogger(SharedEntityRepositoryImpl.class);
    private static final String SHAREDENTITY_PERSISTENCE_UNIT = "sharedentity-persistence-unit";

    public SharedEntityRepositoryImpl() {
        super(WaterSharedEntity.class, SHAREDENTITY_PERSISTENCE_UNIT);
    }

    @Override
    public void removeByPK(String entityResourceName, long entityId, long userId) {
        log.debug("Repository Remove entity {} with primary key: (entityResourceName: {}, entityId: {}, userId: {})", this.getType().getSimpleName(), entityResourceName, entityId, userId);
        WaterSharedEntity sharedEntity = findByPK(entityResourceName, entityId, userId);
        if (sharedEntity != null)
            this.remove(sharedEntity);

    }

    @Override
    public WaterSharedEntity findByPK(String entityResourceName, long entityId, long userId) {
        Query findByResourceName = this.getQueryBuilderInstance().field("entityResourceName").equalTo(entityResourceName);
        Query findByEntityId = this.getQueryBuilderInstance().field("entityId").equalTo(entityId);
        Query findByUserId = this.getQueryBuilderInstance().field("userId").equalTo(userId);
        try {
            return find(findByResourceName.and(findByEntityId).and(findByUserId));
        } catch (NoResultException | jakarta.persistence.NoResultException e) {
            log.debug("No entity to remove with entityResourceName: {} entityId: {} userId:{}", entityResourceName, entityId, userId);
        }
        return null;
    }

    @Override
    public List<WaterSharedEntity> findByEntity(String entityResourceName, long entityId) {
        log.debug("Repository Find entities {} with entityResourceName {} and entityId {}", this.getType().getSimpleName(), entityResourceName, entityId);
        Query findByResourceName = this.getQueryBuilderInstance().field("entityResourceName").equalTo(entityResourceName);
        Query findByEntityId = this.getQueryBuilderInstance().field("entityId").equalTo(entityId);
        try {
            PaginableResult<WaterSharedEntity> results = findAll(-1, -1, findByResourceName.and(findByEntityId), null);
            return new ArrayList<>(results.getResults());
        } catch (NoResultException | jakarta.persistence.NoResultException e) {
            log.debug("No entity to remove with entityResourceName: {} entityId: {}", entityResourceName, entityId);
        }
        return Collections.emptyList();
    }

    @Override
    public List<WaterSharedEntity> findByUser(long userId) {
        log.debug("Repository Find entities {} ", this.getType().getSimpleName());
        Query findByUserId = this.getQueryBuilderInstance().field("userId").equalTo(userId);
        try {
            PaginableResult<WaterSharedEntity> results = findAll(-1, -1, findByUserId, null);
            return new ArrayList<>(results.getResults());
        } catch (NoResultException | jakarta.persistence.NoResultException e) {
            log.debug("No entity to remove with userId:{}", userId);
        }
        return Collections.emptyList();
    }

    @Override
    public List<Long> getSharingUsers(String entityResourceName, long entityId) {
        log.debug("Repository invoke getSharingUsers with type: {} and entityResourceName {} and entityId {}", this.getType().getSimpleName(), entityResourceName, entityId);
        Query entityIdQ = this.getQueryBuilderInstance().field("entityId").equalTo(entityId);
        Query resourceNameQ = this.getQueryBuilderInstance().field("entityResourceName").equalTo(entityResourceName);
        Collection<WaterSharedEntity> results = this.findAll(-1, -1, entityIdQ.and(resourceNameQ), null).getResults();
        Set<Long> userIds = results.stream().map(WaterSharedEntity::getUserId).collect(Collectors.toSet());
        return new ArrayList<>(userIds);
    }

    @Override
    public List<Long> getEntityIdsSharedWithUser(String entityResourceName, long userId) {
        log.debug("Repository invoke getSharingUsers with entityResourceName {} and userId {}", this.getType().getSimpleName(), userId);
        Query entityIdQ = this.getQueryBuilderInstance().field("userId").equalTo(userId);
        Query resourceNameQ = this.getQueryBuilderInstance().field("entityResourceName").equalTo(entityResourceName);
        Collection<WaterSharedEntity> results = this.findAll(-1, -1, entityIdQ.and(resourceNameQ), null).getResults();
        Set<Long> entityIds = results.stream().map(WaterSharedEntity::getEntityId).collect(Collectors.toSet());
        return new ArrayList<>(entityIds);
    }
}
