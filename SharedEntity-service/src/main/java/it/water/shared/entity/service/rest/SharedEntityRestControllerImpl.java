
package it.water.shared.entity.service.rest;

import it.water.shared.entity.api.*;
import it.water.shared.entity.api.rest.*;
import it.water.shared.entity.model.*;

import it.water.core.api.service.BaseEntityApi;
import it.water.core.api.service.rest.FrameworkRestController;
import it.water.core.interceptors.annotations.*;
import it.water.service.rest.persistence.BaseEntityRestApi;

import lombok.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;


/**
 * @Generated by Water Generator
 * Rest Api Class for SharedEntity entity.
 */
@FrameworkRestController(referredRestApi = SharedEntityRestApi.class)
public class SharedEntityRestControllerImpl extends BaseEntityRestApi<WaterSharedEntity> implements SharedEntityRestApi {
    private static Logger log = LoggerFactory.getLogger(SharedEntityRestControllerImpl.class.getName());

    @Inject
    @Setter
    private SharedEntityApi sharedEntityApi;

    @Override
    protected BaseEntityApi<WaterSharedEntity> getEntityService() {
        return sharedEntityApi;
    }

    @Override
    public void removeSharedEntityByPK(WaterSharedEntity sharedEntity) {
        this.sharedEntityApi.removeByPK(sharedEntity);
    }

    @Override
    public WaterSharedEntity findByPK(WaterSharedEntity sharedEntity) {
        return this.sharedEntityApi.findByPK(sharedEntity.getEntityResourceName(), sharedEntity.getEntityId(), sharedEntity.getUserId());
    }

    @Override
    public Collection<WaterSharedEntity> findByEntity(String entityResourceName, long entityId) {
        return this.sharedEntityApi.findByEntity(entityResourceName, entityId);
    }

    @Override
    public Collection<WaterSharedEntity> findByUser(long userId) {
        return this.sharedEntityApi.findByUser(userId);
    }

    @Override
    public Set<Long> getUsers(String entityResourceName, long entityId) {
        return new HashSet<>(this.sharedEntityApi.getSharingUsers(entityResourceName, entityId));
    }
}
